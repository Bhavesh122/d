userService.js 

import axios from 'axios';

const API_BASE_URL = 'http://localhost:8080/api/users';
const AUTH_API_BASE_URL = 'http://localhost:8080/api/auth';

const userService = {
  getByEmail: async (email) => {
    const res = await axios.get(`${API_BASE_URL}/${encodeURIComponent(email)}`);
    return res.data;
  },
  
  // Get total users count from Spring Boot backend
  getTotalUsersCount: async () => {
    try {
      console.log('Fetching users count from Spring Boot backend...');
      const res = await axios.get(`${AUTH_API_BASE_URL}/users/count`);
      console.log('Users count response:', res.data);
      return res.data.count || 0;
    } catch (error) {
      console.error('Error fetching total users count:', error);
      return 0;
    }
  }
};

export default userService;


AuthController.

package com.rwtool.controller;

import com.rwtool.dto.AuthResponse;
import com.rwtool.dto.LoginRequest;
import com.rwtool.dto.SignupRequest;
import com.rwtool.service.AuthService;
import com.rwtool.service.UserActivityLogService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.Map;
import java.util.HashMap;

@RestController
@RequestMapping("/api/auth")
@CrossOrigin(origins = "http://localhost:3000")
@Tag(name = "Authentication", description = "Authentication management APIs")
public class AuthController {
    
    @Autowired
    private AuthService authService;
    
    @Autowired
    private UserActivityLogService auditLogService;
    
    @Operation(summary = "Register a new user", description = "Create a new user account")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "201", description = "User created successfully"),
        @ApiResponse(responseCode = "400", description = "Invalid input or email already exists")
    })
    @PostMapping("/signup")
    public ResponseEntity<AuthResponse> signup(@Valid @RequestBody SignupRequest request) {
        try {
            AuthResponse response = authService.signup(request);
            // Log successful signup
            auditLogService.logSuccess(
                request.getEmail(),
                request.getFullName(),
                request.getRole(),
                "USER_SIGNUP",
                "User signed up successfully"
            );
            return ResponseEntity.status(HttpStatus.CREATED).body(response);
        } catch (Exception e) {
            // Log failed signup
            auditLogService.logFailure(
                request.getEmail(),
                request.getFullName(),
                request.getRole(),
                "USER_SIGNUP",
                "Signup failed: " + e.getMessage()
            );
            throw e;
        }
    }
    
    @Operation(summary = "Login user", description = "Authenticate user and return JWT token")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Login successful"),
        @ApiResponse(responseCode = "401", description = "Invalid credentials")
    })
    @PostMapping("/login")
    public ResponseEntity<AuthResponse> login(@Valid @RequestBody LoginRequest request) {
        try {
            AuthResponse response = authService.login(request);
            // Log successful login
            auditLogService.logSuccess(
                response.getEmail(),
                response.getFullName(),
                response.getRole(),
                "USER_LOGIN",
                "User logged in successfully"
            );
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            // Log failed login
            auditLogService.logFailure(
                request.getEmail(),
                "Unknown",
                "Unknown",
                "LOGIN_FAILED",
                "Failed login attempt: " + e.getMessage()
            );
            throw e;
        }
    }
    
    @Operation(summary = "Health check", description = "Check if the authentication service is running")
    @ApiResponse(responseCode = "200", description = "Service is healthy")
    @GetMapping("/health")
    public ResponseEntity<String> health() {
        return ResponseEntity.ok("Auth service is running");
    }
    
    @Operation(summary = "Get total users count", description = "Get the total number of registered users")
    @ApiResponse(responseCode = "200", description = "Users count retrieved successfully")
    @GetMapping("/users/count")
    public ResponseEntity<Map<String, Long>> getUsersCount() {
        try {
            Long count = authService.getTotalUsersCount();
            Map<String, Long> response = new HashMap<>();
            response.put("count", count);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, Long> errorResponse = new HashMap<>();
            errorResponse.put("count", 0L);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }
}


AuthService.java

package com.rwtool.service;

import com.rwtool.config.JwtUtil;
import com.rwtool.dto.AuthResponse;
import com.rwtool.dto.LoginRequest;
import com.rwtool.dto.SignupRequest;
import com.rwtool.exception.EmailAlreadyExistsException;
import com.rwtool.exception.InvalidCredentialsException;
import com.rwtool.model.User;
import com.rwtool.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class AuthService {
    
    @Autowired
    private UserRepository userRepository;
    
    @Autowired
    private PasswordEncoder passwordEncoder;
    
    @Autowired
    private JwtUtil jwtUtil;
    
    @Transactional
    public AuthResponse signup(SignupRequest request) {
        // Check if email already exists
        if (userRepository.existsByEmail(request.getEmail())) {
            throw new EmailAlreadyExistsException("Email is already registered");
        }
        
        // Create new user
        User user = new User();
        user.setFullName(request.getFullName());
        user.setEmail(request.getEmail());
        user.setPhoneNumber(request.getPhoneNumber());
        user.setDomain(request.getDomain());
        user.setPassword(passwordEncoder.encode(request.getPassword()));
        
        // Set role
        try {
            user.setRole(User.Role.valueOf(request.getRole().toUpperCase()));
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("Invalid role: " + request.getRole());
        }
        
        // Save user
        User savedUser = userRepository.save(user);
        
        // Generate JWT token
        String token = jwtUtil.generateToken(savedUser.getEmail(), savedUser.getRole().name());
        
        return new AuthResponse(
                token,
                savedUser.getId(),
                savedUser.getEmail(),
                savedUser.getFullName(),
                savedUser.getRole().name(),
                savedUser.getPhoneNumber(),
                savedUser.getDomain()
        );
    }
    
    public AuthResponse login(LoginRequest request) {
        // Find user by email
        User user = userRepository.findByEmail(request.getEmail())
                .orElseThrow(() -> new InvalidCredentialsException("Invalid email or password"));
        
        // Check if user is active
        if (!user.getIsActive()) {
            throw new InvalidCredentialsException("Account is deactivated");
        }
        
        // Verify password
        if (!passwordEncoder.matches(request.getPassword(), user.getPassword())) {
            throw new InvalidCredentialsException("Invalid email or password");
        }
        
        // Generate JWT token
        String token = jwtUtil.generateToken(user.getEmail(), user.getRole().name());
        
        return new AuthResponse(
                token,
                user.getId(),
                user.getEmail(),
                user.getFullName(),
                user.getRole().name(),
                user.getPhoneNumber(),
                user.getDomain()
        );
    }
    
    // NEW METHOD - Get total users count
    public Long getTotalUsersCount() {
        return userRepository.count();
    }
}
